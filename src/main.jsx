import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'


// Import components
import App from './App.jsx';
import Homepage from './pages/HomePage/HomePage.jsx'; // Import Homepage component
import './index.css';
import AboutPage from './pages/AboutPage/AboutPage.jsx'; // Import the AboutPage component
import ContactPage from './pages/ContactPage/ContactPage.jsx'; // Import the AboutPage component
import MerchPage from './pages/MerchPage/MerchPage.jsx'; // Import the AboutPage component
 




// import Homepage from './Homepage.jsx'; // Import Homepage component

const router = (
  <Router>
    <Routes>
      {/* Define routes */}
      <Route path="/" element={<App />} />
      <Route path="/HomePage" element={<Homepage />} />
      <Route path="/AboutPage" element={<AboutPage />} /> {/* Add this line */}
      <Route path="/ContactPage" element={<ContactPage />} /> {/* Add this line */}
      <Route path="/MerchPage" element={<MerchPage />} /> {/* Add this line */}
    </Routes>
  </Router>
);


// This code passes a reference to an element in index.html to the ReactDOM.createRoot() method. 
// This creates the root element where your entire React application is rendered. If you open
//index.html, you can find the element thats passed to createRoot().
// Render the router component using createRoot()
ReactDOM.createRoot(document.getElementById('root')).render(router);
  // <React.StrictMode>
  //   <App />
  // </React.StrictMode>,









// this renders "App" inside of that element in the index.HTML file.

// the render() method of the root object returned by ReactDOM is then called
// and <app /> is passed to it. The <app /> element represents an instance
// of the App componeent. App is called the root component. 

// The render() method is called automatically whenever the user interface
// generated by React is updated. ReactDOM then calculates the difference between
// the new state of the application and whats displaying in the browser, and it 
// updated the browser DOM to match the tree rendered by React. This process 
// is known as Virtual DOM.

// The idea behind virtual DOM is that the React code you write doesn't directly
// change the HTML DOM. Instead, React creates (or renders) a "virtual" DOM
// in memory that represents the ideal state of the user interface. 
// The virtual DOM rendered by React is passed to a renderer, such as ReactDOM, 
// which compares the new ideal state with the previous state to figure out how
// to update the user interface. 
